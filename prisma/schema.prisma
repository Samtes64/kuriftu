generator client {
  provider = "prisma-client-js"
  // output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum TierName {
  Gold
  Silver
  Platinum
}

model MembershipTier {
  id          String   @id @default(uuid())
  name        TierName @unique
  description String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("membership_tier")
}

enum PointTransactionType {
  Earn
  Redeem
}

model PointTransaction {
  id              String   @id @default(uuid())
  userId          String
  points          Int
  type            PointTransactionType
  referenceType   String?  // 'booking', 'service', 'promo'
  referenceId     String?
  expiresAt       DateTime?
  transactionId String? @unique
  transaction     Transaction? @relation(fields: [transactionId], references: [id])
  createdAt       DateTime @default(now())

  User User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
  @@map("point_transaction")
}

model Transaction {
  id         String   @id @default(uuid())
  userId      String
  txRef String @unique
  amount Decimal @db.Money
  createdAt   DateTime @default(now())

  User User? @relation(fields: [userId], references: [id])
  pointTransaction PointTransaction?
  @@index([userId])
  @@map("transaction")
}

model User {
  id            String    @id
  tierId        String?
  tier          MembershipTier? @relation(fields: [tierId], references: [id], onDelete: Cascade)
  name          String    @db.Text
  email         String
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  hotel         Hotel[]
  booking       Booking[]
  pointTransactions PointTransaction[]
  transactions  Transaction[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Hotel {
  id                  String    @id @default(uuid())
  userId              String
  title               String    @db.Text
  description         String    @db.VarChar()
  image               String
  city                String
  subCity             String
  locationDescription String    @db.Text
  gym                 Boolean   @default(false)
  spa                 Boolean   @default(false)
  bar                 Boolean   @default(false)
  restaurant          Boolean   @default(false)
  shopping            Boolean   @default(false)
  swimmingPool        Boolean   @default(false)
  addedAt             DateTime  @default(now())
  updatedAt           DateTime  @default(now())
  rooms               Room[]
  bookings            Booking[]

  User User? @relation(fields: [userId], references: [id])

  @@index([title])
}

model Room {
  id             String  @id @default(uuid())
  title          String  @db.Text
  description    String  @db.Text
  bedCount       Int     @default(0)
  bathroomCount  Int     @default(0)
  kingBed        Int     @default(0)
  normalBed      Int     @default(0)
  image          String
  breakfastPrice Int
  roomPrice      Int
  tv             Boolean @default(false)
  balcony        Boolean @default(false)
  wifi           Boolean @default(false)
  forestView     Boolean @default(false)
  mountainView   Boolean @default(false)
  airCondition   Boolean @default(false)
  hotelId        String

  Hotel Hotel? @relation(fields: [hotelId], references: [id])

  Booking Booking[]

  @@index([hotelId])
}

model Booking {
  id                String   @id @default(uuid())
  userId            String
  startDate         DateTime
  endDate           DateTime
  breakfastIncluded Boolean
  currency          String
  totalPrice        Int
  isPayed           Boolean  @default(false)
  paymentIntentId   String   @unique
  bookedAt          DateTime @default(now())

  Hotel   Hotel?  @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId String?
  Room    Room?   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId  String?
  User    User?   @relation(fields: [userId], references: [id])

  @@index([hotelId])
  @@index([roomId])
}


model